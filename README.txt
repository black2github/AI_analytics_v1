## ✅ Полные пояснения к каждому файлу проекта

### 1. `main.py`

> **Назначение**: Точка входа в FastAPI-приложение.

* Определяет маршруты:

  * `/analyze`: анализ требований с учетом RAG-цепочки.
  * `/load/platform`: загрузка платформенных требований.
  * `/load/service`: загрузка требований сервиса по списку Confluence ID.
* Вызывает соответствующие функции из `rag_pipeline`, `embedding_store`, `confluence_loader`.
* Запускается с помощью `uvicorn` в Docker-контейнере.

---

### 2. `config.py`

> **Назначение**: Централизованное управление конфигурацией.

* Загружает переменные окружения: API-ключи, базу Chroma, базовые URL.
* Управляет выбором моделей (`gpt`, `claude`), путями к платформенным требованиям и параметрами Confluence.

---

### 3. `models.py`

> **Назначение**: Pydantic-модели для запросов и ответов.

* Описывает модели:

  * `AnalyzeRequest`
  * `AnalyzeResponse`
  * `LoadServiceRequest`
* Обеспечивает валидацию входных данных и структурирует выход.

---

### 4. `embedding_store.py`

> **Назначение**: Работа с эмбеддингами и Chroma-хранилищем.

* Генерация эмбеддингов через OpenAI (`text-embedding-ada-002`).
* Инициализация и персистентность Chroma (в `./chroma_db`).
* Загрузка и хранение:

  * Платформенных требований.
  * Сервисных требований (в том числе с параметром `namespace`).
* Поиск топ-N похожих требований по эмбеддингу.

---

### 5. `confluence_loader.py`

> **Назначение**: Интеграция с Confluence API.

* Получает содержимое страниц по заданным ID (через Basic Auth или Token).
* Возвращает:

  * чистый текст требований
  * заголовки и метаинформацию
* Используется в `main.py` и `embedding_store.py` для загрузки сервисных требований.

---

### 6. `llm_clients.py`

> **Назначение**: Унифицированный интерфейс к LLM (OpenAI, Claude).

* Позволяет выбрать модель по имени (`gpt`, `claude`).
* Строит промпт.
* Выполняет анализ требования с учетом контекста.
* Вызывается из `rag_pipeline.py`.

---

### 7. `rag_pipeline.py`

> **Назначение**: LangChain Retrieval-Augmented Generation (RAG) цепочка.

* Создает LangChain RetrievalQA с:

  * `Chroma` как retriever
  * OpenAI или Anthropic LLM как генератор
* Определяет полный RAG-процесс: сбор контекста + анализ.
* Используется в маршруте `/analyze`.

---

### 8. `__init__.py`

> **Назначение**: Делает директорию `app/` корректным Python-модулем.

* Содержит `pass` или может импортировать ключевые компоненты.
* Требуется для корректной структуры пакета.

---

## 🔗 Диаграмма зависимостей между модулями

```plaintext
                           +-------------------+
                           |     config.py     |
                           +---------+---------+
                                     |
                                     v
+------------------+      +----------+-----------+        +-------------------+
|  main.py         +----->+  embedding_store.py  +<-------+ confluence_loader |
+--------+---------+      +----------+-----------+        +-------------------+
         |                           |
         |                           v
         |                  +--------+--------+
         |                  |   rag_pipeline  +<----+
         |                  +--------+--------+     |
         |                           |              |
         v                           v              |
+--------+---------+       +---------+--------+     |
|     models.py    |       |   llm_clients.py |<----+
+------------------+       +------------------+
```

---

## 🧩 Резюме

| Категория                              | Файлы                               |
| -------------------------------------- | ----------------------------------- |
| **API-интерфейс**                      | `main.py`, `models.py`              |
| **Конфигурация**                       | `config.py`                         |
| **Работа с эмбеддингами и хранилищем** | `embedding_store.py`, `chroma_db/`  |
| **Интеграция с Confluence**            | `confluence_loader.py`              |
| **LLM-анализ**                         | `llm_clients.py`, `rag_pipeline.py` |
| **Пакет инициализации**                | `__init__.py`                       |

